6.1  立即加载/饿汉模式
        立即加载是指使用类的时候已经将对象创建完毕，常见的实现办法是直接用new实例化。从中文的语境看，立即加载有"着急" "急迫"的意味，
        所以也称为"饿汉模式"。
        在立即加载/饿汉模式中，调用方法前，实例已经被工厂创建，
        测试代码：singleton_0/MyObject.java
        这个版本为立即加载型，但此版本代码的缺点是不能有其他实例变量，因为getInstance()方法没有同步，所以有可能出现非线程安全问题，

6.2  延迟加载/懒汉模式
    延迟加载是指调用get()方法时实例才被工厂创建，常见的实现办法是在get()方法中进行New实例化。从中文的语境来看，延迟加载 "缓慢" "不急迫"，
    所以也称为 "懒汉模式"

6.2.1  延迟加载/懒汉模式解析
    在延迟加载/懒汉模式中，调用方法时才被工厂创建，
    测试代码：singleton_1/MyObject.java
    结论：虽然取得一个对象的实例，但结果在多线程环境中则会出现取出多个实例的情况，这与单例模式的初衷是背离的。

6.2.2   延迟加载/懒汉模式的缺点
    缺点：在多线程环境中，前面的 "延迟加载" 实例中的代码就是错误的，不能实现保持单例的状态。下面来看如何在多线程环境中结合
    "错误的单例模式" 创建出 "多例" 的情况
    创建测试代码：singleton_2/MyObject.java
    结论：结果创建了3个对象，并不是单例的，这就是"错误的单例模式"，

6.2.3   延迟加载/懒汉模式的解决方案
    1、声明synchronized关键字
    既然多个线程可以同时进入getInstance()方法，那么只需要对getInstance()方法声明synchronized关键字即可。
    测试代码：singleton_2_1/MyObject.java
    结论：加入同步synchronized关键字得到相同实例的对象，但这种方法的运行效率非常低，是同步运行的。

    2、尝试同步代码块
    同步方法用于对方法的整体进行同步，这其运行效率是比较低的，那么改成同步代码块能改进吗？
    创建测试代码：singleton_2_2/MyObject.java
    结论：此方法加入同步synchronized语句块得到相同实例的对象，但这种方法的运行效率也非常低，和synchronized同步方法一样是同步运行的。
    继续更改代码尝试解决这个缺点

    3、针对某些重要代码进行单独同步
    同步代码块可以针对某些重要代码进行单独同步，而其他代码则不需要同步，运行效率完全可以得到大幅提升。
    测试项目：singleton_3/MyObject.java
    结论：从语句结构上运行效率得到了提升，但在多线程的情况下还是无法解决得到同一个实例对象的结果。那到底如何解决"懒汉模式"
    遇到多线程的情况呢？

    4、使用DCL机制
    可以使用DCL(Double-Check Locking,双检查锁)机制来实现多线程环境中的延迟加载单例模式。
    测试代码：singleton_5/MyObject.java

    使用volatile修改变量myObject使该变量在多个线程间达到可见性，另外也禁止了myObject = new MyObject代码重排序，因为myObject = new MyObject()
    代码在内部分为3个步骤：
        1）memory = allocate();  //分配对象的内存空间
        2）ctorInstance(memory); //初始化对象
        3）myObject = memory;    //设置instance指向刚分配的内存地址

        JIT编译器有可能将3个步骤重排序呈：
        1）memory = allocate();      //分配对象的内存空间
        2）myObject = memory;        //设置instance指向刚分配的内存地址
        3）ctorInstance(memory)      //初始化对象

    结论：使用DCL机制成功解决了懒汉模式遇到多线程的问题。DCL也是大多数多线程结合单例模式使用的解决方案。

    5、DCL使用volatile的必要性
        防止指令重排

 6.3  使用静态内置类实现单例模式
    测试代码：singleton_7/MyObject.java

 6.4  序列化与反序列化的单例模式实现
 当单例的对象进行序列化时，使用默认的反序列行为取出的对象是多例的。
 测试项目：singleton_7_1/MyObject.java
 主要是复用JVM内存中原有的MyObject单例对象，UserInfo对象被复用，也就实现了对MyObject序列化与反序列化保持单例性的效果。

 6.5 使用static代码块实现单例模式
 静态代码块中的代码在使用类的时候就已经执行，所以可以应用静态代码块的这个特点来实现单例模式
 测试代码：singleton_8/MyObject.java

 6.6  使用enum枚举数据类型实现单例模式
    enum枚举数据类型的特性和静态代码的特性相似，在使用枚举类时，构造方法会被自动调用，可以应用这个特性实现单例模式
    测试项目：singleton_9/MyObject.java



