本章主要介绍Java多线程的同步，也就是如何在Java语言中写出线程安全的程序，解决非线程安全的相关问题。
    重要技术点：
        synchronized对象监视器为Object时的使用方法；
        synchronized对象监视器为class时的使用方法；
        非线程安全问题是如何出现的；
        关键字volatile的主要作用；
        关键字volatile与synchronized的区别及使用情况

    2.1  synchronized同步方法
    关键字synchronized可用来保障原子性、可见性和有序性。
    非线程安全问题会在多个线程对同一对象中的实例变量进行并发访问时发生，产生的后果就是脏读。

    2.1.1 方法内的变量为线程安全
    非线程安全问题存在于实例变量中，对于方法内部的私有变量，则不存在非线程安全问题，结果是 "线程安全" 的。

    该实例是不存在线程安全的
    HasSelfPrivateNum.class

    方法中的变量不存在非线程安全问题，永远都死线程安全，这是因为方法内部的变量具有私有特性。

    2.1.2 实例变量非线程安全问题与解决方案
    如果多个线程共同访问一个对象的实例变量，则有可能出现非线程安全问题
    用户线程访问对象中如果有多个实例变量，则运行的结果有可能出现交叉的情况。
    如果只有一个实例变量，则有可能会出现覆盖的情况
    代码：HasSelfPrivarteNum.class

    2.1.3 同步synchronized在字节码指令中的原理
    在方法中使用synchronized关键字实现同步的原因是使用了flag标记ACC_SYN_CHRONIZED,当调用方法时，调用指令会检查方法的ACC_SYNCHRONIZED访问标记是
    否设置，如果设置了，执行线程先持有同步锁，然后执行方法，最后在方法完成时释放锁。

    同步与异常的区别：
    同步：按顺序执行A和B这两个业务，就是同步
    异步：执行A业务的时候，B业务也在同时执行，就是异步

    2.1.4 多个对象多个锁
    代码：twoObjectTwoLock.class
    本实例中创建了两个业务对象，在系统产生了两个锁，线程和业务对象属于一对一的关系，每个线程执行自己所属业务对象
    中的同步方法，不存在争抢关系，所以这就是异步，另外，在这种情况下，synchronized可以不需要，因为不会出现非线程安全问题。

    只有多个线程执行相同的的业务对象中的方法时，线程和业务对象属于多对一的关系，为了避免出现非线程安全问题，所以出现了synchronized。

    2.1.5 将synchronized方法与对象作为锁
    代码：synchronizedMethodLockObject.class
    结论如下：
    1）A线程先持有object对象的Lock锁，B线程可以以异步的方式调用object对象中的非synchronized类型的方法
    2）A线程先持有objcet对象的Lock锁，B线程如果在这时调用object对象中的synchronized类型的方法，则需要等待，也就是同步。
    3)在方法声明处添加synchronized并不是锁方法，而是锁当前类的对象。
    4)在Java中只有 "将对象作为锁" 这种说法，并没有 "锁方法" 这种说法。
    5)在Java语言中，"锁" 就是 “对象”,"对象" 可以映射成 "锁"，哪个线程拿到这把锁，哪个线程就可以执行这个对象中的synchronized同步方法。
    6）如果在X对象中使用了synchronized关键字声明非静态方法，则X对象就被当成锁。

    2.1.6 脏读
    在赋值时进行了同步，但在取值时有可能出现一些意想不到的情况。这种情况就是脏读(dirty read)，发生脏读的原因是在读取实例变量，此
    值已经被其他线程更改过了。
    代码：PublilcVar.class

    加上synchronized可以防止脏读
    脏读前一定会出现不同线程一起去写实例变量的情况，这就是不同线程 "争抢" 实例变量的结果。

    2.1.7 synchronized锁重入
        关键字synchronized拥有重入锁的功能，即在使用synchronized时，当一个线程得到一个对象锁后，再次请求此对象锁时是可以得到该锁对象的，
        这也证明在一个synchronized方法/块的内部调用本类的其他synchronized方法/块时,是永远可以得到锁的.
     代码:Service.class

     可重入锁：指自己可以再次获取自己的内部锁。例如，一个线程获得了某个对象锁，此时这个对象锁还没有释放，
     当其再次想要获取这个对象锁时还是可以获取的，如果不可重入锁，则不会调用其他方法的

     2.1.8 锁重入支持继承的环境
     锁重入也支持父子类继承的环境。
     代码：synLockIn.class

    2.1.9 出现异常，锁自动释放

    当一个线程执行的代码出现异常时，其所持有的锁会自动释放
    代码：ThrowExceptionNoLock.class

    本例子说明：线程a出现异常并释放锁，线程b进入方法正常输出，当出现异常时，锁可以自动释放
    2.1.10  重写方法不使用synchronized
    重写方法如果不使用synchronized关键字，即是非同步方法，使用后变成同步方法
    代码：SynNotExtends.class

    注意：线程以异步的方式进行输出，所以需要在子类的重写方法中添加synchronized关键字。

    2.1.11 public static boolean holdsLock(Object obju)方法的使用
    holdsLock作用：当currentThread在指定的对象上保持锁定时，才返回true。
    HoldsLockThread.class

    2.2 synchronized同步语句块
    用关键字synchronized声明方法在某些情况下是有弊端的，例如，A线程调用同步方法执行一个长时间的任务，那么B线程等待的时间就比较长，这种情况可以
    使用synchronized同步语句块来解决问题，以提高运行效率。

    synchronized方法是将当前对象作为锁，而synchronized代码块是将任意对象作为锁。可以将锁看成一个标识，哪个线程有这个标识，就可以执行同步方法。

    2.2.1 synchronized方法的弊端
    线程2必须要等待线程1运行完可以运行，否则一直等下去，解决这样的问题可以使用synchronized同步块
    代码：Task.class

    2.2.2 synchronized同步代码块的使用
    当两个并发线程访问同一个对象object中的synchronized(this)同步代码块时，一段时间内只能有一个线程得到执行，零一个线程必须等待当前线程执行完这个
    代码块以后才能执行该代码块。
    代码：SynchronizedOneThreadIn.class

    结论：虽然使用了synchronized同步代码块，但执行效率还是没有提高，仍是同步运行

    2.2.3 用同步代码解决同步方法的弊端
    synchronized (this)同步代码块。

    2.2.4 一半异步，一半同步
    不在synchronized块中就是异步执行，在synchronized块中就是同步执行。

    2.2.5 synchronized代码块间的同步性
    在使用同步synchronized(this)代码块时需要注意，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对一个同一个object中
    所有其他synchronized(this)同步代码块的访问将被阻塞，这说明synchronized使用的对象监视器是同一个，即使用的锁是同一个。
    代码：ObjectService.class

    2.2.6 println()方法也是同步的
    JDK的源代码中也有synchronized(this)使用的体现，PrintStream.java类中的println()重载的方法代码如下：
    public void println(String x){
        synchronized(this) {
            print(x);
            newLine();
        }
    }

    public void println(Object x) {
        String s = String.valueOf(x);
        synchronized(this){
            print(s);
            newLine();
        }
    }

    使用synchronized(this)语句块保证了数据的完整性，不会出现信息交叉混乱的情况。

    2.2.7 验证同步synchronized(this)代码块是锁定当前对象的
    和synchronized方法一样，synchronized(this)代码块也是锁定当前对象的。

    2.2.8 将任意对象作为锁
    多个线程调用同一个对象中的不同名称的synchronized同步方法或synchronized(this)同步代码块时，调用的效果都是按顺序执行，即同步
    synchronized同步方法的作用
    1)对其他synchronized同步方法或synchronized(this)同步代码块调用呈同步效果。
    2)同一时间只有一个线程可以执行synchronized同步方法中的代码。
    synchronized(this)同步代码块的作用：
    1)对其他synchronized同步方法或synchronized(this)同步代码块调用呈同步效果。
    2)同一时间只有一个线程可以执行synchronized(this)同步代码块中的代码。

    注意：还可以使用synchronized(非 this 对象 x)
    锁非this对象具有一定的优点：如果一个类中有很多个synchronized方法，则这时虽然能实现同步，但影响运行效率，如果使用同步代码块非this
    对象，则synchronized(非 this)代码块中的程序与同步方法是异步的，因为有两把锁，不与其他锁this同步方法争抢this锁，可大大提高运行效率。

    2.2.9 多个锁就是异步运行
    想使用 "synchronized(非 this 对象 x) 同步代码块" 格式进行同步操作时，锁必须是同一个，如果不是同一个锁，则运行结果就是异步调用，交叉运行。
    代码：SynchronizedService.class

    2.2.10 验证方法被调用是随机的
    同步代码块放在非同步synchronized方法中进行声明，并不能保证调用方法的线程的执行同步(顺序性)，也就是线程调用方法的顺序是无序的，
    虽然在同步块中执行的顺序是同步的。
    代码：MyList.class

    结果：从运行结果来看，同步方法中的代码是同步输出的，所以线程的"进入" 与 "退出"是成对出现的，但方法被调用的时机是随机的，
    即线程A和线程B的执行是异步的。

    2.2.11 不同步导致的逻辑错误及其解决方法
    如果方法不被同步化，则会出现逻辑上的错误。
    代码：MyOneList.class

    2.2.12 细化验证3个结论
    synchronized(非 this 对象 x)格式的写法是将x对象本身作为 “对象监视器”，这样就可以分析出3个结论：
    1)当多个线程同时执行synchronized(x){}同步代码块时呈同步效果
    2)当其他线程执行x对象中synchronized同步时呈同步效果。
    3)当其他线程执行x对象方法里面的synchronized(this)代码块时呈现同步效果。
    需要注意：如果其他线程调用不加synchronized关键字的方法，则还是异步调用。
    第一个结论实例：P1/MyService.class，使用了同样的锁是同步，使用了不同的锁是异步调用

    第二个结论实例：p2/MyService.class

    第三个结论实例：p3/MyService.class

    2.2.13 类Class的单例性
    每一个*.java文件对应Class类的实例都是一个，在内存中是单例的

    Class类用于描述类的基本信息，包括有多少个字段，有多少个构造方法，有多少个普通方法等，为了减少对内存的高占用率，在内存中只需要存在一份
    Class类对象就可以了

    2.。2.14 静态同步synchronized方法与synchronized(class)代码块
    关键字synchronized还可以应用在static静态方法上，如果这样写，那是对当前的*.class文件对应的Class类对象进行持锁，Class类的对象是单例的，
    更具体地说，在静态static方法上使用synchronized关键字声明同步时，使用当前静态方法所在类对应的Class类的单例对象作为锁。

    结论：关键字加到static静态方法上的方式是将Class类对象作为锁，而synchronized关键字加到非static静态方法上的方式是将方法所在类的对象作为锁。

    2.2.17 String常量池特性与同步相同的问题与解决方案
    JVM具有String常量池的功能，大多数情况下，同步synchronized代码块不使用String作为锁对象，而改用其他，
    例如：new Object()实例化一个新的Object对象，它并不放入缓存池中，或者执行new String()创建不同的字符串对象，形成不同的锁。

    2.2.19 多线程的死锁
        java线程死锁是一个经典的多线程问题，因为不同的线程都在等待根本不可能被释放的锁，从而导致所有的任务都无法继续完成。在多线程技术中，
        “死锁” 是必须避免的，因为这会造成线程 “假死”。
        注意：在设计程序中时要避免双方持有对方的锁，只要互相等待对方释放锁，就有可能出现死锁。

    2.2.25 同步写法案例比较
    使用关键字synchronized写法如下：
    public class MyService{
        synchronized public void static void testMethod1(){

        }

        public void testMethod2(){
            synchronized (MyService.class){
            }
        }

        synchronized public void testMethod3(){
        }

        public void testMethod4(){
            synchronized (this) {
            }
        }

        public void testMethod5() {
            synchronized("adb"){
            }
        }
    }

    上面的代码分为3种类型
    (A)testMethod1()和testMethod2()持有的锁是同一个，即MyService.java对应的Class类的对象。
    (B)testMethod3()和testMethod4()持有的锁是同一个，即MyService.java类的对象。
    (C)testMethod5()持有的锁是字符串abc。
    说明testMethod1()和testMethod2()是同步关系，testMethod3()和testMethod4()是同步关系。
    A和C之间是异步关系，B和C是异步关系，A和B之间是异步关系。

    2.3 volatile关键字
    volatile在使用上具有以下特性：
    1）可见性：B线程能马上看到A线程更改的数据
    2）原子性：如果想实现原子性就要在声明变量时添加volatile，数据类型上只有long和double没有实现写原子性，原子性取决于具体实现
    3）禁止代码重排序

    2.3.1 可见性的测试
    printString.java,解决方法死循环：使用多线程

    3.使用多线程有可能出现死循环
    出现死循环的原因时定义变量时，存在于公共堆栈及线程的私有堆栈中，例如：private boolean isRunning = true，不同的内存地址中的数据，一直尝试去
    获取私有堆栈而导致死循环
    代码：RunThread.java
    4、使用volatile关键字解决多线程出现的死循环
    volatile private boolean isRunning = true;
    停止线程的一种方法：使用退出标志使线程正常退出
    使用volatile关键字，可以强制从公共内存中读取变量的值
    使用volatile关键字，可以增加实例变量在多个线程之间的可见性。

    5、synchronized代码块具有增加可见性的作用
    关键字synchronized可以使多个线程访问同一个资源具有同步性，而且具有线程工作内存中的私有变量与公共内存中的变量同步的特性，即可见性。

    2.3.2 原子性的测试
    在32位系统中，针对未使用volatile声明的long或double数据类型没有实现写原子性。如果想实现，则声明变量时添加volatile。在64位系统中，原子性取决于
    具体的实现，在X86架构64位JDK版本中，写double或long都是原子了。

    另外，volatile关键字最致命的缺点时不支持原子性，也就是多个线程对用volatile修饰的变量i执行i--操作时，i--操作还会被分解成3步，造成非线程安全问题的出现。

    1.在32位系统中long 或 double数据类型写操作为非原子的
    代码：MyThreadA.java
    2.使用volatile解决在32系统中long或double数据类型写操作为非原子的更改代码如下：
    public class MyService{
        public long i;
    }
    3.关键字volatile int i++ 非原子的特性
    使用多线程执行volatile int i++ 赋值操作时为非原子，
    VolatileMyThread.java
    关键字volatile使用的主要场合是在多个线程中可以感知实例变量被更改了，并且可以获得最新的值时，也就是可用于增加可见性/可视性

    4.使用Atomic原子类进行i++操作实现原子性
    除了在i++操作时使用synchronized关键字实现同步外，还可以使用AtomicInteger原子类实现原子性。
    原子操作是不能分割的整体，没有其他线程能够中断或检查处于原子操作的变量。一个原子(atomic)类型就是一个原子操作可用的类型，它可以
    在没有锁(lock)的情况下做到线程安全(thread-safe)。
    代码：AddCountThread.java

    5.出现逻辑混乱与解决
    在有逻辑性的情况下，原子类的输出结果具有随机性，只需要加上synchronized实现同步就可以了

  2.3.3 禁止代码重排序的测试
  使用关键字volatile可以禁止代码重排序
  在Java程序运行时，JIT，即使编译器，可以动态地改变程序代码运行的顺序，例如，有如下代码：
  A代码-重耗时
  B代码-轻耗时
  C代码-重耗时
  D代码-轻耗时

  在多线程的环境中，JIT有可能进行代码重排，重排序后的代码有可能如下：

  B代码-轻耗时
  D代码-轻耗时
  A代码-重耗时
  C代码-重耗时

  这样做的主要原因是CPU流水线是同时执行这4个指令的，那么轻耗时的代码在很大程度上先执行完，以让出CPU流水线资源给其他指令，所以代码重排序是为了追求更高
  的程序运行效率。

  重排序发生在没有依赖关系上。
  使用Volatile可以防止指令重排
  注意的点：
  1）、关键字volatile之前的代码可以重排
  2）、关键字volatile之后的代码可以重排
  3）、关键字volatile之前的代码不可以重排到volatile之后
  4）、关键字volatile之后的代码不可以重排到volatile之前
  5）、关键字synchronized之前的代码不可以重排到synchronized之后
  6）、关键字synchronized之后的代码不可以重排到synchronized之前

  8、总结：
  关键字synchronized的主要作用是保证同一时刻，只有一个线程可以执行某一方法，或是某一个代码块，synchronized可以修饰方法及代码块。
  synchronized的特性：
    1）可见性：synchronized具有可见性
    2）原子性：使用synchronized实现了同步，同步实现了原子性，保证被同步的代码段在同一时间只有一个线程在执行。
    3）禁止代码重排序：synchronized禁止代码重排序。

  关键字volatile的主要作用是让其他线程可以看到最新的值，volatile只能修饰变量。它包含三个特征
    1）可见性：B线程能马上看到A线程更改的数据
    2）原子性：32位系统上，针对未使用volatile声明的long或double数据类型没有实现原子性，如果想实现，则声明
    变量时添加volatile，64位系统上原子性取决于具体的实现，在X86架构64位JDK版本中，写double或long是原子的，另外，针对
    用volatile声明的int i变量进行i++操作时是非原子的。
    3）禁止代码重排序

    关键字volatile和synchronized的使用场景总结如下：
    1）当想实现一个变量的值被更改时，让其他线程能取到最新的值时，就要对变量使用volatile。
    2）当多个线程对同一个对象中的实例变量进行操作时，为了避免出现非线程安全，就要使用synchronized。

















